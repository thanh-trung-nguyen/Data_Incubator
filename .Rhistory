Neighborhood[1,1]
Neighborhood[1,NeighborhoodID]
character(2877)
## load the home price data:
Lib <- "library=TruliaStats"
Func <- "function=getNeighborhoodStats"
NeighborhoodStat <- "neighborhoodId=2877"
startDate <- "startDate=2016-06-06"
endDate <- "endDate=2016-06-30"
API2 <- GET(paste(URL,"?",Lib,"&",Func,"&",NeighborhoodStat,"&",startDate,"&",endDate,"&",apiKey,sep=""))
Text <- content(API2,as="text")
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
subText <- substr(Text,idx1[n],idx1[n+1])
n=1
subText <- substr(Text,idx1[n],idx1[n+1])
subText
subText <- substr(Text,idx1[n],idx1[n+1] + 30)
subText
n=1
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
numWeeks <- length(idx2)
WeekEndingDate <- 1:numWeeks
class(WeekEndingDate) <- "Date"
AvgPrice_All <- rep(0,numWeeks)
AvgPrice_1BR <- rep(0,numWeeks)
AvgPrice_2BR <- rep(0,numWeeks)
AvgPrice_3BR <- rep(0,numWeeks)
AvgPrice_4BR <- rep(0,numWeeks)
AvgPrice_5BR <- rep(0,numWeeks)
AvgPrice_6BR <- rep(0,numWeeks)
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
subText <- substr(Text,idx1[n],idx1[n+1])
idx2 <- gregexpr("<subcategory><type>",subText);
idx3 <- gregexpr("</type>",subText)
idx4 <- gregexpr("<averageListingPrice>",subText)
idx5 <- gregexpr("</averageListingPrice>",subText)
idx2
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
numWeeks <- length(idx2)
WeekEndingDate <- 1:numWeeks
class(WeekEndingDate) <- "Date"
AvgPrice_All <- rep(0,numWeeks)
AvgPrice_1BR <- rep(0,numWeeks)
AvgPrice_2BR <- rep(0,numWeeks)
AvgPrice_3BR <- rep(0,numWeeks)
AvgPrice_4BR <- rep(0,numWeeks)
AvgPrice_5BR <- rep(0,numWeeks)
AvgPrice_6BR <- rep(0,numWeeks)
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
subText <- substr(Text,idx1[n],idx1[n+1])
idx3 <- gregexpr("<subcategory><type>",subText);
idx3 <- as.numeric(idx1[[1]])
idx4 <- gregexpr("</type>",subText)
idx4 <- as.numeric(idx1[[1]])
idx5 <- gregexpr("<averageListingPrice>",subText)
idx5 <- as.numeric(idx1[[1]])
idx6 <- gregexpr("</averageListingPrice>",subText)
idx6 <- as.numeric(idx1[[1]])
idx3 <- gregexpr("<subcategory><type>",subText);
idx3 <- as.numeric(idx3[[1]])
idx4 <- gregexpr("</type>",subText)
idx4 <- as.numeric(idx4[[1]])
idx5 <- gregexpr("<averageListingPrice>",subText)
idx5 <- as.numeric(idx5[[1]])
idx6 <- gregexpr("</averageListingPrice>",subText)
idx6 <- as.numeric(idx6[[1]])
length(idx5)
subText
"hanoi" =="hanoi"
i=1
substr(subText,start=idx[i]+19,stop=idx4[i]-1)
substr(subText,start=idx3[i]+19,stop=idx4[i]-1)
as.numeric(substr(subText,start=idx5[1]+21,stop=idx6[1]-1))
for (n in 1:numWeeks)
{
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
subText <- substr(Text,idx1[n],idx1[n+1])
idx5 <- gregexpr("<averageListingPrice>",subText)
idx5 <- as.numeric(idx5[[1]])
idx6 <- gregexpr("</averageListingPrice>",subText)
idx6 <- as.numeric(idx6[[1]])
AvgPrice_All[n] <- as.numeric(substr(subText,start=idx5[1]+21,stop=idx6[1]-1))
AvgPrice_1BR[n] <- as.numeric(substr(subText,start=idx5[2]+21,stop=idx6[2]-1))
AvgPrice_2BR[n] <- as.numeric(substr(subText,start=idx5[3]+21,stop=idx6[3]-1))
AvgPrice_3BR[n] <- as.numeric(substr(subText,start=idx5[4]+21,stop=idx6[4]-1))
AvgPrice_4BR[n] <- as.numeric(substr(subText,start=idx5[5]+21,stop=idx6[5]-1))
AvgPrice_5BR[n] <- as.numeric(substr(subText,start=idx5[6]+21,stop=idx6[6]-1))
AvgPrice_6BR[n] <- as.numeric(substr(subText,start=idx5[7]+21,stop=idx6[7]-1))
}
AvgPrice <-data.table(WeekEndingDate,AvgPrice_1BR,AvgPrice_2BR,AvgPrice_3BR,AvgPrice_4BR,AvgPrice_5BR,AvgPrice_6BR,AvgPrice_All)
View(AvgPrice)
rm(list=ls())
URL <- "http://api.trulia.com/webservices.php"
Lib <- "library=LocationInfo"
Func <- "function=getNeighborhoodsInCity"
City <- "city=Chicago"
State <- "state=IL"
apiKey <- "apikey=ryr7ngde5p2tyzy95y87nfje"
API1 <- GET(paste(URL,"?",Lib,"&",Func,"&",City,"&",State,"&",apiKey,sep=""))
Text <- content(API1,as = "text")
idx1 = gregexpr("<neighborhood><id>",Text)
idx1 <- as.numeric(idx1[[1]])
idx2 <- gregexpr("</id><name>",Text)
idx2 <- as.numeric(idx2[[1]])
idx3 <- gregexpr("</name></neighborhood",Text)
idx3<-as.numeric(idx3[[1]])
numNeigh = length(idx1)
NeighborhoodID = rep(0,numNeigh)
NeighborhoodName = rep("",numNeigh)
for (n in 1:numNeigh)
{
NeighborhoodID[n] <- as.numeric(substr(Text,start=idx1[n]+18,stop = idx2[n]-1))
NeighborhoodName[n] <- substr(Text,start = idx2[n]+11, stop= idx3[n]-1)
}
## combine the ID and name in a table:
Neighborhood <- data.table(NeighborhoodID,NeighborhoodName)
View(Neighborhood)
## load the home price data:
Lib <- "library=TruliaStats"
Func <- "function=getNeighborhoodStats"
NeighborhoodStat <- "neighborhoodId=2877"
startDate <- "startDate=2016-06-06"
endDate <- "endDate=2016-06-25"
API2 <- GET(paste(URL,"?",Lib,"&",Func,"&",NeighborhoodStat,"&",startDate,"&",endDate,"&",apiKey,sep=""))
Text <- content(API2,as="text")
idx1<- gregexpr("<weekEndingDate>",Text)
idx
idx1
Text
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx1
substr(Text,idx1[1],idx1[1]+30)
substr(Text,idx1[1],idx1[1]+70)
substr(Text,idx1[1],idx1[1]+150)
substr(Text,idx1[2],idx1[1]+150)
substr(Text,idx1[2],idx1[2]+150)
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
API2 <- GET(paste(URL,"?",Lib,"&",Func,"&",NeighborhoodStat,"&",startDate,"&",endDate,"&","statType=listings","&",apiKey,sep=""))
Text <- content(API2,as="text")
Text
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
t1 <- "<weekEndingDate>2016-06-18</weekEndingDate><listingPrice><subcategory><type>All Properties</type><numberOfProperties>62</numberOfProperties><medianListingPrice>248817</medianListingPrice><averageListingPrice>308184</averageListingPrice></subcategory><subcategory><type>1 Bedroom Properties</type><numberOfProperties>1</numberOfProperties><medianListingPrice>117000</medianListingPrice><averageListingPrice>117000</averageListingPrice></subcategory><subcategory><type>2 Bedroom Properties</type><numberOfProperties>31</numberOfProperties><medianListingPrice>236592</medianListingPrice><averageListingPrice>236263</averageListingPrice></subcategory><subcategory><type>2 Bedroom Properties</type><numberOfProperties>23</numberOfProperties><medianListingPrice>234900</medianListingPrice><averageListingPrice>236513</averageListingPrice></subcategory><subcategory><type>3 Bedroom Properties</type><numberOfProperties>21</numberOfProperties><medianListingPrice>242590</medianListingPrice><averageListingPrice>296779</averageListingPrice></subcategory><subcategory><type>3 Bedroom Properties</type><numberOfProperties>23</numberOfProperties><medianListingPrice>281000</medianListingPrice><averageListingPrice>305536</averageListingPrice></subcategory><subcategory><type>4 Bedroom Properties</type><numberOfProperties>5</numberOfProperties><medianListingPrice>574583</medianListingPrice><averageListingPrice>590869</averageListingPrice></subcategory><subcategory><type>4 Bedroom Properties</type><numberOfProperties>6</numberOfProperties><medianListingPrice>569500</medianListingPrice><averageListingPrice>595067</averageListingPrice></subcategory><subcategory><type>5 Bedroom Properties</type><numberOfProperties>2</numberOfProperties><medianListingPrice>506400</medianListingPrice><averageListingPrice>520100</averageListingPrice></subcategory><subcategory><type>6 Bedroom Properties</type><numberOfProperties>1</numberOfProperties><medianListingPrice>741143</medianListingPrice><averageListingPrice>741143</averageListingPrice></subcategory></listingPrice></listingStat><listingStat>"
t2 <- "<weekEndingDate>2016-06-18</weekEndingDate><listingPrice><subcategory><type>All Properties</type><numberOfProperties>47</numberOfProperties><medianListingPrice>249000</medianListingPrice><averageListingPrice>306053</averageListingPrice></subcategory><subcategory><type>1 Bedroom Properties</type><numberOfProperties>1</numberOfProperties><medianListingPrice>117000</medianListingPrice><averageListingPrice>117000</averageListingPrice></subcategory><subcategory><type>2 Bedroom Properties</type><numberOfProperties>31</numberOfProperties><medianListingPrice>236592</medianListingPrice><averageListingPrice>236263</averageListingPrice></subcategory><subcategory><type>2 Bedroom Properties</type><numberOfProperties>23</numberOfProperties><medianListingPrice>234900</medianListingPrice><averageListingPrice>236513</averageListingPrice></subcategory><subcategory><type>3 Bedroom Properties</type><numberOfProperties>21</numberOfProperties><medianListingPrice>242590</medianListingPrice><averageListingPrice>296779</averageListingPrice></subcategory><subcategory><type>3 Bedroom Properties</type><numberOfProperties>23</numberOfProperties><medianListingPrice>281000</medianListingPrice><averageListingPrice>305536</averageListingPrice></subcategory><subcategory><type>4 Bedroom Properties</type><numberOfProperties>5</numberOfProperties><medianListingPrice>574583</medianListingPrice><averageListingPrice>590869</averageListingPrice></subcategory><subcategory><type>4 Bedroom Properties</type><numberOfProperties>6</numberOfProperties><medianListingPrice>569500</medianListingPrice><averageListingPrice>595067</averageListingPrice></subcategory><subcategory><type>5 Bedroom Properties</type><numberOfProperties>2</numberOfProperties><medianListingPrice>506400</medianListingPrice><averageListingPrice>520100</averageListingPrice></subcategory><subcategory><type>6 Bedroom Properties</type><numberOfProperties>1</numberOfProperties><medianListingPrice>741143</medianListingPrice><averageListingPrice>741143</averageListingPrice></subcategory></listingPrice></listingStat><listingStat>"
t1==t2
Lib <- "library=TruliaStats"
Func <- "function=getNeighborhoodStats"
NeighborhoodStat <- "neighborhoodId=2877"
startDate <- "startDate=2016-05-06"
endDate <- "endDate=2016-06-25"
API2 <- GET(paste(URL,"?",Lib,"&",Func,"&",NeighborhoodStat,"&",startDate,"&",endDate,"&","statType=listings","&",apiKey,sep=""))
Text <- content(API2,as="text")
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
Text
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
numWeeks <- length(idx2)
WeekEndingDate <- 1:numWeeks
class(WeekEndingDate) <- "Date"
AvgPrice_All <- rep(NA,numWeeks)
AvgPrice_1BR <- rep(NA,numWeeks)
AvgPrice_2BR <- rep(NA,numWeeks)
AvgPrice_3BR <- rep(NA,numWeeks)
AvgPrice_4BR <- rep(NA,numWeeks)
AvgPrice_5BR <- rep(NA,numWeeks)
AvgPrice_6BR <- rep(NA,numWeeks)
for (n in 1:numWeeks)
{
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
subText <- substr(Text,idx1[n],idx1[n+1])
idx5 <- gregexpr("<averageListingPrice>",subText)
idx5 <- as.numeric(idx5[[1]])
idx6 <- gregexpr("</averageListingPrice>",subText)
idx6 <- as.numeric(idx6[[1]])
AvgPrice_All[n] <- as.numeric(substr(subText,start=idx5[1]+21,stop=idx6[1]-1))
AvgPrice_1BR[n] <- as.numeric(substr(subText,start=idx5[2]+21,stop=idx6[2]-1))
AvgPrice_2BR[n] <- as.numeric(substr(subText,start=idx5[3]+21,stop=idx6[3]-1))
AvgPrice_3BR[n] <- as.numeric(substr(subText,start=idx5[4]+21,stop=idx6[4]-1))
AvgPrice_4BR[n] <- as.numeric(substr(subText,start=idx5[5]+21,stop=idx6[5]-1))
AvgPrice_5BR[n] <- as.numeric(substr(subText,start=idx5[6]+21,stop=idx6[6]-1))
AvgPrice_6BR[n] <- as.numeric(substr(subText,start=idx5[7]+21,stop=idx6[7]-1))
}
AvgPrice <-data.table(WeekEndingDate,AvgPrice_1BR,AvgPrice_2BR,AvgPrice_3BR,AvgPrice_4BR,AvgPrice_5BR,AvgPrice_6BR,AvgPrice_All)
Lib <- "library=TruliaStats"
Func <- "function=getNeighborhoodStats"
NeighborhoodStat <- "neighborhoodId=2877"
startDate <- "startDate=2008-01-01"
endDate <- "endDate=2016-06-30"
API2 <- GET(paste(URL,"?",Lib,"&",Func,"&",NeighborhoodStat,"&",startDate,"&",endDate,"&","statType=listings","&",apiKey,sep=""))
Text <- content(API2,as="text")
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
numWeeks <- length(idx2)
WeekEndingDate <- 1:numWeeks
class(WeekEndingDate) <- "Date"
AvgPrice_All <- rep(NA,numWeeks)
AvgPrice_1BR <- rep(NA,numWeeks)
AvgPrice_2BR <- rep(NA,numWeeks)
AvgPrice_3BR <- rep(NA,numWeeks)
AvgPrice_4BR <- rep(NA,numWeeks)
AvgPrice_5BR <- rep(NA,numWeeks)
AvgPrice_6BR <- rep(NA,numWeeks)
for (n in 1:numWeeks)
{
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
subText <- substr(Text,idx1[n],idx1[n+1])
idx5 <- gregexpr("<averageListingPrice>",subText)
idx5 <- as.numeric(idx5[[1]])
idx6 <- gregexpr("</averageListingPrice>",subText)
idx6 <- as.numeric(idx6[[1]])
AvgPrice_All[n] <- as.numeric(substr(subText,start=idx5[1]+21,stop=idx6[1]-1))
AvgPrice_1BR[n] <- as.numeric(substr(subText,start=idx5[2]+21,stop=idx6[2]-1))
AvgPrice_2BR[n] <- as.numeric(substr(subText,start=idx5[3]+21,stop=idx6[3]-1))
AvgPrice_3BR[n] <- as.numeric(substr(subText,start=idx5[4]+21,stop=idx6[4]-1))
AvgPrice_4BR[n] <- as.numeric(substr(subText,start=idx5[5]+21,stop=idx6[5]-1))
AvgPrice_5BR[n] <- as.numeric(substr(subText,start=idx5[6]+21,stop=idx6[6]-1))
AvgPrice_6BR[n] <- as.numeric(substr(subText,start=idx5[7]+21,stop=idx6[7]-1))
}
AvgPrice <-data.table(WeekEndingDate,AvgPrice_1BR,AvgPrice_2BR,AvgPrice_3BR,AvgPrice_4BR,AvgPrice_5BR,AvgPrice_6BR,AvgPrice_All)
substr(Text,start=1,stop= 10000)
plot(AvgPrice_1BR)
WeekEndingDate2 <- unique(WeekEndingDate)
WeekEndingDate2
AvgPrice[,mean(`AvgPrice_1BR`),by=`WeekEndingDate`]
AvgPrice[,.(mean(`AvgPrice_1BR`),mean(`AvgPrice_1BR`)),by=`WeekEndingDate`]
AvgPrice[,.(mean(`AvgPrice_1BR`),mean(`AvgPrice_2BR`)),by=`WeekEndingDate`]
AvgPrice[,.(mean(`AvgPrice_1BR`),mean(`AvgPrice_All`)),by=`WeekEndingDate`]
AvgPrice2 <- AvgPrice[,.(AvgPrice_1BR=mean(`AvgPrice_1BR`),AvgPrice_All=mean(`AvgPrice_All`)),by=`WeekEndingDate`]
View(AvgPrice2)
AvgPrice2 <- AvgPrice[,.(AvgPrice_1BR=mean(`AvgPrice_1BR`),AvgPrice_2BR=mean(`AvgPrice_2BR`),AvgPrice_3BR=mean(`AvgPrice_3BR`),AvgPrice_4BR=mean(`AvgPrice_4BR`),AvgPrice_5BR=mean(`AvgPrice_5BR`),AvgPrice_6BR=mean(`AvgPrice_6BR`),AvgPrice_All=mean(`AvgPrice_All`)),by=`WeekEndingDate`]
install.packages("ggplot2")
library(ggplot2)
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice[,`AvgPrice_1BR`])
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_1BR`])
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_1BR`],xlab="Year",ylab="Average price, 1 bedroom")
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_1BR`],xlab="Year",ylab="Weekly average price, 1 bedroom")
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_ALL`],xlab="Year",ylab="Weekly average price, all properties")
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_All`],xlab="Year",ylab="Weekly average price, all properties")
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_All`],xlab="Year",ylab="Weekly average price, all properties",geom="line")
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_2BR`],xlab="Year",ylab="Weekly average price, all properties",geom="line")
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_3BR`],xlab="Year",ylab="Weekly average price, all properties",geom="line")
source("Challenge2.R")
rm(list=ls())
source("Challenge2.Rh")
source("Challenge2.R")
source("Challenge2.R")
print(format(median(dataIV[,`Closed Roll Assessed Improvement Value`]),digits=10))
cat("helo", 123)
cat("Fraction of assessments for properties of most common class: " format(fraction, digits=10))
cat("Fraction of assessments for properties of most common class: ", format(fraction, digits=10))
cat("Difference between the greatest and least average improvement values: ", format(max(Average[,`Avg`]) - min(Average[,`Avg`]),digits=10))
cat("Median assessed improvement value: ", format(median(dataIV[,`Closed Roll Assessed Improvement Value`]),digits=10))
cat("Yearly growth rate of land value: ", format(rate,digits=10))
cat("Area of maximum neighborhood: ",format(Area,digits=10))
rm(list=ls())
source("Challenge2.R")
source("Challenge2.R")
source("Challenge2.R")
source("Challenge2.R")
dataAnalysis_SF()
dataAnalysis_SF()
source("Challenge2.R")
dataAnalysis_SF()
source("Challenge2.R")
dataAnalysis_SF()
rm(list=ls())
data <- fread("Historic_Secured_Property_Tax_Rolls.csv")
## Remove rows with missing year number of block and lot number, these rows are senseless.
data <- na.omit(data,cols= c("Closed Roll Fiscal Year", "Block and Lot Number"))
## sort data by block number and year & calculate total number assessments:
setkey(data,`Block and Lot Number`,`Closed Roll Fiscal Year`)
numAssessments = dim(data)[1]
## Question 1: Find the fraction of assessments for properties of the most common class:
## calculate the number of assessments for each property class:
propertyClass <- data[,.N,by=`Property Class Code`]
fraction <- propertyClass[,max(N)]/propertyClass[,sum(N)]
format(fraction, digits=10)
dataIV <- data[,list(`Closed Roll Fiscal Year`, `Neighborhood Code`, `Block and Lot Number`, `Closed Roll Assessed Improvement Value`)]
## remove missing values in the improvement value column before analyzing it:
dataIV <- na.omit(dataIV,"Closed Roll Assessed Improvement Value")
dataIV <- dataIV[`Neighborhood Code` !=""] ## remove empty neightborhood codes.
## == Find the latest assessments for each property:
blockCode <- dataIV[,`Block and Lot Number`]
blockCode <- factor(blockCode)
blockCode <- table(blockCode) ## count the number of assessments for each block.
numCodes  <- length(blockCode) ## number of block and lot codes.
latestIdx <- rep(blockCode[1],numCodes) ## the latest assessmnt of the first block is row number blockCode[1]
for (n in 2:numCodes)
{
latestIdx[n] <- latestIdx[n-1] + blockCode[n]
}
dataIV <- dataIV[latestIdx,]   ## data with latest assessment of each property.
## the median of improvement value, consider only non-zero assessments,
dataIV <- dataIV[`Closed Roll Assessed Improvement Value`!=0] ## remove zero improvement values.
format(median(dataIV[,`Closed Roll Assessed Improvement Value`]),digits=10)
Average <- dataIV[,list(Avg = mean(`Closed Roll Assessed Improvement Value`)),by=`Neighborhood Code`]
format(max(Average[,`Avg`]) - min(Average[,`Avg`]),digits=10)
dataLand <- data[,list(`Closed Roll Fiscal Year`, `Block and Lot Number`, `Closed Roll Assessed Land Value`)]
dataLand <- na.omit(dataLand,"Closed Roll Assessed Land Value")
dataLand <- dataLand[`Closed Roll Assessed Land Value` > 0]
t <- dataLand[,`Closed Roll Fiscal Year`]  ## time variable
t = as.numeric(t) ## convert to double.
Y <- log(dataLand[,`Closed Roll Assessed Land Value`]) ## log of land value.
N <- length(t)
rate = (N*sum(Y*t) - (sum(Y)*sum(t)))/(N*sum(t^2) - (sum(t))^2)
format(rate,digits=10)
dataLocation <- data[,list(`Closed Roll Fiscal Year`, `Neighborhood Code`, `Block and Lot Number`, `Location`)]
## remove missing values in the improvement value column before analyzing it:
dataLocation <- dataLocation[`Neighborhood Code` !="" & `Location` != ""]
## == Find the latest assessments for each property:
blockCode <- dataLocation[,`Block and Lot Number`]
blockCode <- factor(blockCode)
blockCode <- table(blockCode) ## count the number of assessments for each block.
numCodes  <- length(blockCode) ## number of block and lot codes.
latestIdx <- rep(blockCode[1],numCodes) ## the latest assessmnt of the first block is row number blockCode[1]
for (n in 2:numCodes)
{
latestIdx[n] <- latestIdx[n-1] + blockCode[n]
}
dataLocation <- dataLocation[latestIdx,]   ## data with latest assessment of each property.
location <- dataLocation[,`Location`]; ## this is a character vector
N <- length(location)
latitude <- rep(0,N)
longitude <- rep(0,N)
a <- strsplit(location,",")
for (n in 1:N)
{
b <- a[[n]]
latitude[n] <- as.numeric(substr(b[1],2,nchar(b[1])))
longitude[n] <- as.numeric(substr(b[2],1,nchar(b[2])-1))
}
a = sd(latitude)
b = sd(longitude)
area = pi*a*b; ## area of each lot.
## area = pi*a*b*pi^2/180^2*6371^2; ## area of each lot.
Neighborhood <- dataLocation[,`Neighborhood Code`]
Neighborhood <-table(Neighborhood)
Area = max(Neighborhood)*area
Area
dataBY <- data[,list(`Closed Roll Fiscal Year`, `Block and Lot Number`, `Year Property Built`, `Number of Units`)]
dataBY <- na.omit(dataBY,"Year Property Built")
dataBY <- na.omit(dataBY,"Number of Units") ## remove missing values
dataBY <- dataBY[`Number of Units` != 0]
## == Find the earliest assessments for each propertyL
blockCode <- dataBY[,`Block and Lot Number`]
blockCode <- factor(blockCode)
blockCode <- table(blockCode) ## count the number of assessments for each block.
numCodes  <- length(blockCode) ## number of block and lot codes.
earliestIdx <- rep(1,numCodes)  ## the earliest assessment of the first block is the first row
for (n in 2:numCodes)
{
earliestIdx[n] <- earliestIdx[n-1] + blockCode[n-1]
}
dataBY <- dataBY[earliestIdx,]
## the oldest building in SF was built in 1791. So remove years before 1700:
dataBYBefore1950 <- dataBY[`Year Property Built` < 1950 & `Year Property Built` > 1700]
dataBYAfter1950 <- dataBY[`Year Property Built` >= 1950 & `Year Property Built` <= 2015]
# difference between the average number of units built after and before 1950.
format(mean(dataBYAfter1950[,`Number of Units`]) - mean(dataBYBefore1950[,`Number of Units`]),digits=10)
dataBedRoom <- data[,list(`Closed Roll Fiscal Year`, `Block and Lot Number`, `Number of Bedrooms`,`Number of Units`,`Zipcode of Parcel`)]
## remove missing values in the improvement value column before analyzing it:
dataBedRoom <- na.omit(dataBedRoom,"Number of Bedrooms")
dataBedRoom <- na.omit(dataBedRoom,"Number of Units")
dataBedRoom <- na.omit(dataBedRoom,"Zipcode of Parcel")
dataBedRoom <- dataBedRoom[`Number of Bedrooms` > 0 & `Number of Units` > 0]
## == Find the latest assessments for each property:
blockCode <- dataBedRoom[,`Block and Lot Number`]
blockCode <- factor(blockCode)
blockCode <- table(blockCode) ## count the number of assessments for each block.
numCodes  <- length(blockCode) ## number of block and lot codes.
latestIdx <- rep(blockCode[1],numCodes) ## the latest assessmnt of the first block is row number blockCode[1]
for (n in 2:numCodes)
{
latestIdx[n] <- latestIdx[n-1] + blockCode[n]
}
dataBedRoom <- dataBedRoom[latestIdx,]   ## data with latest assessment of each property.
BedMean <- dataBedRoom[,.(Bed.mean=mean(`Number of Bedrooms`)), by=`Zipcode of Parcel`]
Unitmean <- dataBedRoom[,.(Unit.mean=mean(`Number of Units`)), by=`Zipcode of Parcel`]
format(max(BedMean[,`Bed.mean`]/Unitmean[,`Unit.mean`]),digits=10)
dataArea <- data[,list(`Closed Roll Fiscal Year`, `Block and Lot Number`, `Property Area in Square Feet`,`Lot Area`,`Zipcode of Parcel`)]
## remove missing values in the improvement value column before analyzing it:
dataArea <- na.omit(dataArea,"Property Area in Square Feet")
dataArea <- na.omit(dataArea,"Lot Area")
dataArea <- na.omit(dataArea,"Zipcode of Parcel")
## == Find the latest assessments for each property:
blockCode <- dataArea[,`Block and Lot Number`]
blockCode <- factor(blockCode)
blockCode <- table(blockCode) ## count the number of assessments for each block.
numCodes  <- length(blockCode) ## number of block and lot codes.
latestIdx <- rep(blockCode[1],numCodes) ## the latest assessmnt of the first block is row number blockCode[1]
for (n in 2:numCodes)
{
latestIdx[n] <- latestIdx[n-1] + blockCode[n]
}
dataArea <- dataArea[latestIdx,]   ## data with latest assessment of each property.
TotalPropertyArea <- dataArea[,.(prop.area = sum(`Property Area in Square Feet`)), by=`Zipcode of Parcel`]
TotalLandArea <- dataArea[,.(land.area = sum(`Lot Area`)), by=`Zipcode of Parcel`]
format(max(TotalPropertyArea[,`prop.area`]/TotalLandArea[,`land.area`]),digits=10)
rm(list=ls())
source("Challenge2.R")
API <- GET("https://www.quandl.com/api/v3/datasets/BLSI/CWSR0000SAF11211.csv")
inflationData <- content(API)
View(inflationData)
write.csv(inflationData,"inflation.csv")
rm(list=ls())
library(httr)
library(jsonlite)
library(xml2)
library(readr)
library(data.table)
## load the neighborhood data:
URL <- "http://api.trulia.com/webservices.php"
Lib <- "library=LocationInfo"
Func <- "function=getNeighborhoodsInCity"
City <- "city=Chicago"
State <- "state=IL"
apiKey <- "apikey=ryr7ngde5p2tyzy95y87nfje"
API1 <- GET(paste(URL,"?",Lib,"&",Func,"&",City,"&",State,"&",apiKey,sep=""))
Text <- content(API1,as = "text")
idx1 = gregexpr("<neighborhood><id>",Text)
idx1 <- as.numeric(idx1[[1]])
idx2 <- gregexpr("</id><name>",Text)
idx2 <- as.numeric(idx2[[1]])
idx3 <- gregexpr("</name></neighborhood",Text)
idx3<-as.numeric(idx3[[1]])
numNeigh = length(idx1)
NeighborhoodID = rep(0,numNeigh)
NeighborhoodName = rep("",numNeigh)
for (n in 1:numNeigh)
{
NeighborhoodID[n] <- as.numeric(substr(Text,start=idx1[n]+18,stop = idx2[n]-1))
NeighborhoodName[n] <- substr(Text,start = idx2[n]+11, stop= idx3[n]-1)
}
## combine the ID and name in a table:
Neighborhood <- data.table(NeighborhoodID,NeighborhoodName)
## load the home price data:
Lib <- "library=TruliaStats"
Func <- "function=getNeighborhoodStats"
NeighborhoodStat <- "neighborhoodId=2877"
startDate <- "startDate=2008-01-01"
endDate <- "endDate=2016-06-30"
API2 <- GET(paste(URL,"?",Lib,"&",Func,"&",NeighborhoodStat,"&",startDate,"&",endDate,"&","statType=listings","&",apiKey,sep=""))
Text <- content(API2,as="text")
idx1<- gregexpr("<weekEndingDate>",Text)
idx1 <- as.numeric(idx1[[1]])
idx1 <- c(idx1,nchar(Text))  ## add the end character for use in the loop
idx2 <- gregexpr("</weekEndingDate>",Text)
idx2 <- as.numeric(idx2[[1]])
numWeeks <- length(idx2)
WeekEndingDate <- 1:numWeeks
class(WeekEndingDate) <- "Date"
AvgPrice_All <- rep(NA,numWeeks)
AvgPrice_1BR <- rep(NA,numWeeks)
AvgPrice_2BR <- rep(NA,numWeeks)
AvgPrice_3BR <- rep(NA,numWeeks)
AvgPrice_4BR <- rep(NA,numWeeks)
AvgPrice_5BR <- rep(NA,numWeeks)
AvgPrice_6BR <- rep(NA,numWeeks)
for (n in 1:numWeeks)
{
WeekEndingDate[n] <- as.Date(substr(Text,idx1[n]+ 16, idx2[n]-1),format="%Y-%m-%d")## date
subText <- substr(Text,idx1[n],idx1[n+1])
idx5 <- gregexpr("<averageListingPrice>",subText)
idx5 <- as.numeric(idx5[[1]])
idx6 <- gregexpr("</averageListingPrice>",subText)
idx6 <- as.numeric(idx6[[1]])
AvgPrice_All[n] <- as.numeric(substr(subText,start=idx5[1]+21,stop=idx6[1]-1))
AvgPrice_1BR[n] <- as.numeric(substr(subText,start=idx5[2]+21,stop=idx6[2]-1))
AvgPrice_2BR[n] <- as.numeric(substr(subText,start=idx5[3]+21,stop=idx6[3]-1))
AvgPrice_3BR[n] <- as.numeric(substr(subText,start=idx5[4]+21,stop=idx6[4]-1))
AvgPrice_4BR[n] <- as.numeric(substr(subText,start=idx5[5]+21,stop=idx6[5]-1))
AvgPrice_5BR[n] <- as.numeric(substr(subText,start=idx5[6]+21,stop=idx6[6]-1))
AvgPrice_6BR[n] <- as.numeric(substr(subText,start=idx5[7]+21,stop=idx6[7]-1))
}
AvgPrice <-data.table(WeekEndingDate,AvgPrice_1BR,AvgPrice_2BR,AvgPrice_3BR,AvgPrice_4BR,AvgPrice_5BR,AvgPrice_6BR,AvgPrice_All)
AvgPrice2 <- AvgPrice[,.(AvgPrice_1BR=mean(`AvgPrice_1BR`),AvgPrice_2BR=mean(`AvgPrice_2BR`),AvgPrice_3BR=mean(`AvgPrice_3BR`),AvgPrice_4BR=mean(`AvgPrice_4BR`),AvgPrice_5BR=mean(`AvgPrice_5BR`),AvgPrice_6BR=mean(`AvgPrice_6BR`),AvgPrice_All=mean(`AvgPrice_All`)),by=`WeekEndingDate`]
WeekEndingDate2 <- unique(WeekEndingDate)
View(AvgPrice2)
qplot(AvgPice2[,WeekEndingDate],AvgPrice2[,AvgPrice_2BR])
qplot(AvgPice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_2BR`])
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_2BR`])
?qplot
qplot(AvgPrice2[,`WeekEndingDate`],AvgPrice2[,`AvgPrice_2BR`],geom="line")
write.csv(AvgPrice2,'homeprice.csv')
